name: Build for Windows 2022

on:
  push:
    #tags:
    #  - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  INSTALL_PATH: multisense_1.0-0_amd64

jobs:
  ReleaseJob:
    name: Create Release
    runs-on: ubuntu-latest
    outputs: 
      upload_url: ${{ steps.create_release.outputs.upload_url }} 
    
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: ${{ github.run_number }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false
          
  BuildWindows:
    name: Build For Windows
    needs: ReleaseJob
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2022

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Prepare Vulkan SDK
      uses: humbletim/setup-vulkan-sdk@v1.2.0
      with:
        vulkan-query-version: 1.3.204.0
        vulkan-components: Vulkan-Headers, Vulkan-Loader
        vulkan-use-cache: true
        
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} #-D CMAKE_C_COMPILER=gcc-11 -D CMAKE_CXX_COMPILER=g++-11
              
    - name: Build project
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target install
      
    - name: zipFiles
      uses: vimtor/action-zip@v1
      with:
        files: ./build/${{env.INSTALL_PATH}}
        dest:  MultiSense_viewer.zip
        
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.ReleaseJob.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./MultiSense_viewer.zip
        asset_name: MultiSense_viewer.zip
        asset_content_type: application/zip
        
    - name: "Create Artifact"
      uses: actions/upload-artifact@v2
      with:
        name: multisense-zip
        path: ${{github.workspace}}/build/MultiSense_viewer.zip

  BuildUbuntu:
    name: Build and package for Ubuntu
    needs: ReleaseJob
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Prepare Vulkan SDK
      uses: humbletim/setup-vulkan-sdk@v1.2.0
      with:
        vulkan-query-version: 1.3.204.0
        vulkan-components: Vulkan-Headers, Vulkan-Loader
        vulkan-use-cache: true

    - name: Install dependencies
      run: sudo apt-get install -y cmake libx11-dev build-essential xorg-dev libtbb-dev libavformat-dev libavcodec-dev libavutil-dev

    #- name: update gcc11
      #run: sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test && sudo apt update && sudo apt install -y gcc-11 g++-11

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} #-D CMAKE_C_COMPILER=gcc-11 -D CMAKE_CXX_COMPILER=g++-11

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build

    - name: Install
      working-directory: ${{github.workspace}}/build
      run: cmake --install . --config ${{env.BUILD_TYPE}}

    - name: Prepare package step
      working-directory: ${{github.workspace}}/build
      run: |
        mkdir ${{env.INSTALL_PATH}}/DEBIAN && cp ${{github.workspace}}/Assets/Tools/ubuntu/control ${{env.INSTALL_PATH}}/DEBIAN/
        mkdir -p ${{env.INSTALL_PATH}}/usr/share/applications && cp ${{github.workspace}}/Assets/Tools/ubuntu/multisense.desktop ${{env.INSTALL_PATH}}/usr/share/applications/
        cp ${{github.workspace}}/Assets/Tools/ubuntu/start.sh ${{env.INSTALL_PATH}}/opt/multisense/
        cp ${{github.workspace}}/Assets/Tools/ubuntu/pk_exec.sh ${{env.INSTALL_PATH}}/opt/multisense/

    - name: Package
      working-directory: ${{github.workspace}}/build
      run: dpkg-deb --build --root-owner-group ${{env.INSTALL_PATH}}
        
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.ReleaseJob.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./build/${{env.INSTALL_PATH}}.deb
        asset_name: ${{env.INSTALL_PATH}}.deb
        asset_content_type: application/zip
        
        
  build:
    name: Create Windows Installer
    needs: [BuildWindows, ReleaseJob]
    runs-on: windows-2022

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Get Artifacts
        uses: actions/download-artifact@v2
        with:
          name: multisense-zip
        
      - name: Extract some files
        run: |
          mkdir files
          tar -xf MultiSense_viewer.zip -C .\files
          cp .\files\Assets\Tools\windows\inno_setup_script.iss .\
        shell: cmd
      - name: Building the installer
        run: |
          "%programfiles(x86)%\inno Setup 6\iscc.exe" "inno_setup_script.iss"
        shell: cmd
        
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.ReleaseJob.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./MultiSense_viewer.zip
          asset_name: MultiSense_viewer.zip
          asset_content_type: application/zip
        
