name: MultiSense Viewer Pull request workflow

on:
  pull_request:
    types: [ opened, synchronize, reopened ]
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  VersionJob:
    name: "Set Version"
    runs-on: ubuntu-latest
    outputs:
      install_path: ${{ steps.install_path_id.outputs.install_path }}
      install_path_ubuntu: ${{ steps.install_path_id_ubuntu.outputs.install_path_ubuntu }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history to access tags
          fetch-tags: true

      - name: Fetch tags explicitly
        run: git fetch --tags

      - name: Extract version from tag
        id: extract_version
        run: |
          # Get the latest tag (e.g., v1.1.5) and remove the 'v' prefix if needed
          TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          VERSION=${TAG#v}
          
          # Split VERSION into MAJOR, MINOR, and PATCH
          MAJOR=$(echo "$VERSION" | cut -d. -f1)
          MINOR=$(echo "$VERSION" | cut -d. -f2)
          PATCH=$(echo "$VERSION" | cut -d. -f3)
          
          # Export the version numbers as environment variables
          echo "MAJOR=$MAJOR" >> $GITHUB_ENV
          echo "MINOR=$MINOR" >> $GITHUB_ENV
          echo "PATCH=$PATCH" >> $GITHUB_ENV

      - name: Print version
        run: echo "The version is ${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.PATCH }}"

      - name: Set Output
        id: install_path_id
        run: echo "install_path=multisense_${{ env.MAJOR }}.${{ env.MINOR }}-${{ env.PATCH }}_amd64" >> $GITHUB_OUTPUT

      - name: Set Output Ubuntu
        id: install_path_id_ubuntu
        run: echo "install_path_ubuntu=multisense_${{ env.MAJOR }}.${{ env.MINOR }}-${{ env.PATCH }}_amd64/opt/multisense" >> $GITHUB_OUTPUT

  BuildWindows:
    name: Compile Check for Windows
    needs: [ VersionJob ]
    runs-on: windows-2022
    steps:
      - name: Print install location
        run: echo "My output is ${{ needs.VersionJob.outputs.install_path }}"
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Disable certificate revocation check for curl
        shell: pwsh
        run: |
          [Environment]::SetEnvironmentVariable("CURL_SSL_NO_REVOKE", "1", "User")

      - name: Prepare Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: latest
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true

      - name: Configure CMake
        run: cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DGIT_SUBMODULE=OFF -DWARNINGS_AS_ERRORS=FALSE

      - name: Build project
        run: cmake --build ${{ github.workspace }}/build --config ${{ env.BUILD_TYPE }} --target install -- /m:10

      # Remove the unwanted directories from the install folder
      - name: Remove bin, include, and lib folders
        shell: pwsh
        run: |
          Write-Host "Removing 'bin', 'include', and 'lib' from the install folder..."
          $installPath = "${{ needs.VersionJob.outputs.install_path }}"
          foreach ($folder in @('bin', 'include', 'lib')) {
              $fullPath = Join-Path $installPath $folder
              if (Test-Path $fullPath) {
                  Remove-Item -Path $fullPath -Recurse -Force
                  Write-Host "Removed $fullPath"
              }
              else {
                  Write-Host "Folder $fullPath does not exist, skipping..."
              }
          }

      - name: Create ZIP Archive
        shell: pwsh
        run: |
          # Construct the full install path using the workspace and the output from VersionJob
          $installPath = Join-Path $env:GITHUB_WORKSPACE "build/${{ needs.VersionJob.outputs.install_path }}"
          
          # Define where to put the ZIP archive; adjust the path as needed
          $zipPath = Join-Path $env:GITHUB_WORKSPACE "build/install_artifact.zip"
          
          Write-Host "Zipping the install folder from $installPath to $zipPath"
          
          # If a previous ZIP exists, remove it
          if (Test-Path $zipPath) {
            Remove-Item $zipPath -Force
          }
          
          # Compress all files from the install directory into the ZIP archive
          Compress-Archive -Path (Join-Path $installPath "*") -DestinationPath $zipPath
          
          Write-Host "Created ZIP archive at $zipPath"


      # Upload the ZIP archive as an artifact
      - name: Upload install artifact
        uses: actions/upload-artifact@v4
        with:
          name: install-artifact
          path: ${{ github.workspace }}\build\install_artifact.zip

  BuildUbuntu20:
    name: Build and package for Ubuntu 20_04
    needs: [ VersionJob ]
    runs-on: ubuntu-20.04
    steps:
      - name: Print install location
        run: echo "My output is ${{ needs.VersionJob.outputs.install_path }}"
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Prepare Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: 1.2.198.1
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true

      - name: Install dependencies
        run: sudo apt-get install -y cmake libx11-dev build-essential xorg-dev libtbb-dev libavformat-dev libavcodec-dev libavutil-dev libswscale-dev libssl-dev libgtk-3-dev libsystemd-dev

      - name: Configure CMake
        run: cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DGIT_SUBMODULE=OFF -DWARNINGS_AS_ERRORS=FALSE

      - name: Build
        run: cmake --build ${{ github.workspace }}/build -- -j3

      - name: Install
        working-directory: ${{ github.workspace }}/build
        run: cmake --install . --config ${{ env.BUILD_TYPE }}

      - name: Prepare package step
        working-directory: ${{ github.workspace }}/build
        run: |
          mkdir ${{ needs.VersionJob.outputs.install_path }}/DEBIAN && cp ${{ github.workspace }}/Assets/Tools/Ubuntu/control ${{ needs.VersionJob.outputs.install_path }}/DEBIAN/
          mkdir -p ${{ needs.VersionJob.outputs.install_path }}/usr/share/applications && cp ${{ github.workspace }}/Assets/Tools/Ubuntu/multisense.desktop ${{ needs.VersionJob.outputs.install_path }}/usr/share/applications/
          cp ${{ github.workspace }}/Assets/Tools/Ubuntu/start.sh ${{ needs.VersionJob.outputs.install_path }}/opt/multisense/
          rm -rf ${{ needs.VersionJob.outputs.install_path }}/opt/multisense/include
          rm -rf ${{ needs.VersionJob.outputs.install_path }}/opt/multisense/lib
          rm -rf ${{ needs.VersionJob.outputs.install_path }}/opt/multisense/share

      - name: Package
        working-directory: ${{ github.workspace }}/build
        run: dpkg-deb --build --root-owner-group ${{ needs.VersionJob.outputs.install_path }}

      - name: Upload DEB package
        uses: actions/upload-artifact@v4
        with:
          name: deb-package-ubuntu-20
          path: ${{ github.workspace }}/build/${{ needs.VersionJob.outputs.install_path }}.deb

  BuildUbuntu22:
    name: Build and package for Ubuntu 22_04
    needs: [ VersionJob ]
    runs-on: ubuntu-22.04
    steps:
      - name: Print install location
        run: echo "My output is ${{ needs.VersionJob.outputs.install_path }}"
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Prepare Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: 1.3.204.0
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true

      - name: Install dependencies
        run: sudo apt-get install -y cmake libx11-dev build-essential xorg-dev libtbb-dev libavformat-dev libavcodec-dev libavutil-dev libswscale-dev libssl-dev libgtk-3-dev libsystemd-dev libwebp-dev

      - name: Configure CMake
        run: cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DGIT_SUBMODULE=OFF -DWARNINGS_AS_ERRORS=FALSE

      - name: Build
        run: cmake --build ${{ github.workspace }}/build -- -j3

      - name: Install
        working-directory: ${{ github.workspace }}/build
        run: cmake --install . --config ${{ env.BUILD_TYPE }}

      - name: Prepare package step
        working-directory: ${{ github.workspace }}/build
        run: |
          mkdir ${{ needs.VersionJob.outputs.install_path }}/DEBIAN && cp ${{ github.workspace }}/Assets/Tools/Ubuntu/control ${{ needs.VersionJob.outputs.install_path }}/DEBIAN/
          mkdir -p ${{ needs.VersionJob.outputs.install_path }}/usr/share/applications && cp ${{ github.workspace }}/Assets/Tools/Ubuntu/multisense.desktop ${{ needs.VersionJob.outputs.install_path }}/usr/share/applications/
          cp ${{ github.workspace }}/Assets/Tools/Ubuntu/start.sh ${{ needs.VersionJob.outputs.install_path }}/opt/multisense/
          rm -rf ${{ needs.VersionJob.outputs.install_path }}/opt/multisense/include
          rm -rf ${{ needs.VersionJob.outputs.install_path }}/opt/multisense/lib
          rm -rf ${{ needs.VersionJob.outputs.install_path }}/opt/multisense/share

      - name: Package
        working-directory: ${{ github.workspace }}/build
        run: dpkg-deb --build --root-owner-group ${{ needs.VersionJob.outputs.install_path }}

      - name: Upload DEB package
        uses: actions/upload-artifact@v4
        with:
          name: deb-package-ubuntu-22
          path: ${{ github.workspace }}/build/${{ needs.VersionJob.outputs.install_path }}.deb

  BuildUbuntu24:
    name: Build and package for Ubuntu 24_04
    needs: [ VersionJob ]
    runs-on: ubuntu-24.04
    steps:
      - name: Print install location
        run: echo "My output is ${{ needs.VersionJob.outputs.install_path }}"
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Prepare Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: 1.3.204.0
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true

      - name: Install dependencies
        run: sudo apt-get install -y cmake libx11-dev build-essential xorg-dev libtbb-dev libavformat-dev libavcodec-dev libavutil-dev libswscale-dev libssl-dev libgtk-3-dev libsystemd-dev libwebp-dev

      - name: Configure CMake
        run: cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DGIT_SUBMODULE=OFF -DWARNINGS_AS_ERRORS=FALSE

      - name: Build
        run: cmake --build ${{ github.workspace }}/build -- -j3

      - name: Install
        working-directory: ${{ github.workspace }}/build
        run: cmake --install . --config ${{ env.BUILD_TYPE }}

      - name: Prepare package step
        working-directory: ${{ github.workspace }}/build
        run: |
          mkdir ${{ needs.VersionJob.outputs.install_path }}/DEBIAN && cp ${{ github.workspace }}/Assets/Tools/Ubuntu/control ${{ needs.VersionJob.outputs.install_path }}/DEBIAN/
          mkdir -p ${{ needs.VersionJob.outputs.install_path }}/usr/share/applications && cp ${{ github.workspace }}/Assets/Tools/Ubuntu/multisense.desktop ${{ needs.VersionJob.outputs.install_path }}/usr/share/applications/
          cp ${{ github.workspace }}/Assets/Tools/Ubuntu/start.sh ${{ needs.VersionJob.outputs.install_path }}/opt/multisense/
          rm -rf ${{ needs.VersionJob.outputs.install_path }}/opt/multisense/include
          rm -rf ${{ needs.VersionJob.outputs.install_path }}/opt/multisense/lib
          rm -rf ${{ needs.VersionJob.outputs.install_path }}/opt/multisense/share

      - name: Package
        working-directory: ${{ github.workspace }}/build
        run: dpkg-deb --build --root-owner-group ${{ needs.VersionJob.outputs.install_path }}

      - name: Upload DEB package
        uses: actions/upload-artifact@v4
        with:
          name: deb-package-ubuntu-24
          path: ${{ github.workspace }}/build/${{ needs.VersionJob.outputs.install_path }}.deb
