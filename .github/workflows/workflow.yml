name: MultiSense Viewer CI

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch:
    inputs:
      name:
        description: "Who to greet"
        default: "World"
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  INSTALL_PATH: multisense_1.1-0_amd64

jobs:
  VersionJob:
    name: Get the version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      install_path: ${{steps.extract_version.outputs.path}}
    steps:
      - name: Extract version from tag
        id: extract_version
        run: echo "version=${GITHUB_REF#refs/tags/v}"
      - name: Print version
        run: echo "The version is ${{ steps.extract_version.outputs.version }}"

#  ReleaseJob:
#    name: Create Release
#    needs: VersionJob
#    runs-on: ubuntu-latest
#    outputs:
#      upload_url: ${{ steps.create_release.outputs.upload_url }}
#
#    steps:
#      - name: Create Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ github.ref_name }}
#          release_name: ${{ github.ref_name }}
#          body: |
#            MultiSense Viewer Release
#            - Windows users:
#            1a. (Optional) Install WinPcap_driver.exe to let the viewer configure network settings automatically
#            1b. Run the setup: MultiSenseSetup.exe
#
#            - Ubuntu users:
#            1. Make sure you have updated graphics drivers, ffmpeg and policykit installed. Can be installed via apt pacakge manager:
#            $ apt install ffmpeg libvulkan1 policykit-1
#            2. Download and install the multisense_1.1-0_amd64.deb package using your default package manager or type in terminal:
#            $ dpkg --install ~/Downloads/multisense_1.1-0_amd64.deb
#            3. Launch through start menu or run a start script at
#            $ /opt/multisense/start.sh
#            - Uninstall application:
#            1. Windows: Run 000-uninstall.exe in the installation folder
#            2. Ubuntu: Uninstall with your package manager or run dpkg ($ dpkg --remove com.carnegierobotics.multisense)
#          draft: true
#          prerelease: true
#
#
#  BuildWindows:
#    name: Build For Windows
#    needs: [ReleaseJob, VersionJob]
#    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
#    # You can convert this to a matrix build if you need cross-platform coverage.
#    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
#    runs-on: windows-2022
#
#    steps:
#    - uses: actions/checkout@v3
#      with:
#        submodules: 'true'
#
#    - name: Upload WinPCap Driver
#      id: upload-winpcap-driver
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ needs.ReleaseJob.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#        asset_path: ${{github.workspace}}/internal/AutoConnect/WinPcap/WinPcap_driver.exe
#        asset_name: WinPcap_driver.exe
#        asset_content_type: application/zip
#
#
#    - name: Prepare Vulkan SDK
#      uses: humbletim/setup-vulkan-sdk@v1.2.0
#      with:
#        vulkan-query-version: 1.3.204.0
#        vulkan-components: Vulkan-Headers, Vulkan-Loader
#        vulkan-use-cache: true
#
#    - name: Configure CMake
#      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DGIT_SUBMODULE=OFF #-D CMAKE_C_COMPILER=gcc-11 -D CMAKE_CXX_COMPILER=g++-11
#
#    - name: Build project
#      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target install
#
#    - name: zipFiles
#      uses: vimtor/action-zip@v1
#      with:
#        files: ./build/${{env.INSTALL_PATH}}
#        dest:  MultiSense_viewer.zip
#
#    - name: Upload Release Asset
#      id: upload-release-asset
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ needs.ReleaseJob.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#        asset_path: ./MultiSense_viewer.zip
#        asset_name: MultiSense_viewer.zip
#        asset_content_type: application/zip
#
#    - name: "Create Artifact"
#      uses: actions/upload-artifact@v2
#      with:
#        name: multisense-zip
#        path: ${{github.workspace}}/MultiSense_viewer.zip
#
#  BuildUbuntu:
#    name: Build and package for Ubuntu
#    needs: [ReleaseJob, VersionJob]
#    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
#    # You can convert this to a matrix build if you need cross-platform coverage.
#    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
#    runs-on: ubuntu-20.04
#
#    steps:
#    - uses: actions/checkout@v3
#      with:
#        submodules: 'true'
#
#    - name: Prepare Vulkan SDK
#      uses: humbletim/setup-vulkan-sdk@v1.2.0
#      with:
#        vulkan-query-version: 1.3.204.0
#        vulkan-components: Vulkan-Headers, Vulkan-Loader
#        vulkan-use-cache: true
#
#    - name: Install dependencies
#      run: sudo apt-get install -y cmake libx11-dev build-essential xorg-dev libtbb-dev libavformat-dev libavcodec-dev libavutil-dev libswscale-dev
#
#    #- name: update gcc11
#      #run: sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test && sudo apt update && sudo apt install -y gcc-11 g++-11
#
#    - name: Configure CMake
#      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DGIT_SUBMODULE=OFF #-D CMAKE_C_COMPILER=gcc-11 -D CMAKE_CXX_COMPILER=g++-11
#
#    - name: Build
#      # Build your program with the given configuration
#      run: cmake --build ${{github.workspace}}/build
#
#    - name: Install
#      working-directory: ${{github.workspace}}/build
#      run: cmake --install . --config ${{env.BUILD_TYPE}}
#
#    - name: Prepare package step
#      working-directory: ${{github.workspace}}/build
#      run: |
#        mkdir ${{env.INSTALL_PATH}}/DEBIAN && cp ${{github.workspace}}/Assets/Tools/Ubuntu/control ${{env.INSTALL_PATH}}/DEBIAN/
#        mkdir -p ${{env.INSTALL_PATH}}/usr/share/applications && cp ${{github.workspace}}/Assets/Tools/Ubuntu/multisense.desktop ${{env.INSTALL_PATH}}/usr/share/applications/
#        cp ${{github.workspace}}/Assets/Tools/Ubuntu/start.sh ${{env.INSTALL_PATH}}/opt/multisense/
#        rm -rf ${{env.INSTALL_PATH}}/opt/multisense/include
#        rm -rf ${{env.INSTALL_PATH}}/opt/multisense/lib
#        rm -rf ${{env.INSTALL_PATH}}/opt/multisense/share
#
#    - name: Package
#      working-directory: ${{github.workspace}}/build
#      run: dpkg-deb --build --root-owner-group ${{env.INSTALL_PATH}}
#
#    - name: Upload Release Asset
#      id: upload-release-asset
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ needs.ReleaseJob.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#        asset_path: ./build/${{env.INSTALL_PATH}}.deb
#        asset_name: ${{env.INSTALL_PATH}}.deb
#        asset_content_type: application/zip
#
#
#  build:
#    name: Create Windows Installer
#    needs: [BuildWindows, ReleaseJob]
#    runs-on: windows-2022
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Get Artifacts
#        uses: actions/download-artifact@v2
#        with:
#          name: multisense-zip
#
#      - name: Extract some files
#        run: |
#          mkdir files
#          tar -xf .\MultiSense_viewer.zip -C .\files\
#          mv .\files\Assets\Tools\windows\inno_setup_script.iss .\
#          mv .\files\Assets\Tools\compile.sh .\
#          mv .\files\Assets\Tools\install_spirv_compiler.sh .\
#          mv .\files\Assets\Tools\monitor_memory_usage.py .\
#          rm  -R .\files\Assets\Tools\Ubuntu
#          rm  -R .\files\bin
#          rm  -R .\files\include
#          rm  -R .\files\lib
#
#        shell: cmd
#      - name: Building the installer
#        run: |
#          "%programfiles(x86)%\inno Setup 6\iscc.exe" "inno_setup_script.iss"
#        shell: cmd
#
#      - name: Upload Release Asset
#        id: upload-release-asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ needs.ReleaseJob.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#          asset_path: ./Output/MultiSenseSetup.exe
#          asset_name: MultiSenseSetup.exe
#          asset_content_type: application/zip
#
#